{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNzrfwGv7WmeKDLZ1YM2s6/",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Aadhithpr/tic-tac-toe-AI/blob/main/TicTacToeAI\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qjKwfc1jWH37",
        "outputId": "31d17c6d-6ce0-4141-8ad2-8a3cf5e3e74c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter 1 for playing against AI, 2 for playing against a friend:1\n",
            "AI: O Vs You: X\n",
            "Enter to play 1(st) or 2(nd): 1\n",
            "Current State of the Board: \n",
            "\n",
            "\n",
            "_  _  _  \n",
            "\n",
            "_  _  _  \n",
            "\n",
            "_  _  _  \n",
            "\n",
            "\n",
            "Enter X's Position from [1,2,3.....,9]2\n",
            "Current State of the Board: \n",
            "\n",
            "\n",
            "0 X _  \n",
            "\n",
            "_  _  _  \n",
            "\n",
            "_  _  _  \n",
            "\n",
            "\n",
            "Enter X's Position from [1,2,3.....,9]5\n",
            "Current State of the Board: \n",
            "\n",
            "\n",
            "0 X 0 \n",
            "\n",
            "_  X _  \n",
            "\n",
            "_  _  _  \n",
            "\n",
            "\n",
            "Enter X's Position from [1,2,3.....,9]8\n",
            "Current State of the Board: \n",
            "\n",
            "\n",
            "0 X 0 \n",
            "\n",
            "_  X _  \n",
            "\n",
            "_  X _  \n",
            "\n",
            "\n",
            "Player X Wins!!!!\n"
          ]
        }
      ],
      "source": [
        "def ConstBoard(board):\n",
        "    print(\"Current State of the Board: \\n\\n\")\n",
        "    for i in range(0, 9):\n",
        "        if((i>0) and (i%3==0)):\n",
        "            print(\"\\n\")\n",
        "        if(board[i]==0):\n",
        "            print(\"_ \", end=\" \")\n",
        "        if(board[i]==-1):\n",
        "            print(\"X\", end=\" \")\n",
        "        if(board[i]==1):\n",
        "            print(\"0\", end=\" \")\n",
        "    print(\"\\n\\n\")\n",
        "\n",
        "def User1Turn(board):\n",
        "    pos = int(input(\"Enter X's Position from [1,2,3.....,9]\"))\n",
        "    if(board[pos-1]!=0):\n",
        "        print(\"Wrong Move!\")\n",
        "        exit(0)\n",
        "    board[pos-1]=-1\n",
        "\n",
        "def User2Turn(board):\n",
        "    pos = int(input(\"Enter O's Position from [1,2,3.....,9]\"))\n",
        "    if(board[pos-1]!=0):\n",
        "        print(\"Wrong Move!\")\n",
        "        exit(0)\n",
        "    board[pos-1]=1\n",
        "\n",
        "def minmax(board, player):\n",
        "    x = analyzeboard(board)\n",
        "    if(x!=0):\n",
        "        return (x*player)\n",
        "    pos = -1\n",
        "    value = -2\n",
        "    for i in range(0, 9):\n",
        "        if(board[i]==0):\n",
        "            board[i]=player\n",
        "            score = -minmax(board, player* -1)\n",
        "            board[i] = 0\n",
        "            if(score>value):\n",
        "                value = score\n",
        "                pos = i\n",
        "        if(pos== -1):\n",
        "            return 0\n",
        "        return value\n",
        "\n",
        "def CompTurn(board):\n",
        "    pos = -1\n",
        "    value = -2\n",
        "    for i in range(0, 9):\n",
        "        if(board[i]==0):\n",
        "            board[i] = 1\n",
        "            score = -minmax(board, -1)\n",
        "            board[i] = 0\n",
        "            if(score>value):\n",
        "                value = score\n",
        "                pos=i\n",
        "    board[pos]=1\n",
        "\n",
        "def analyzeboard(board):\n",
        "    cb = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]]\n",
        "\n",
        "\n",
        "    for i in range(0,8):\n",
        "      if(board[cb[i][0]]!=0 and board[cb[i][0]]==board[cb[i][1]] and board[cb[i][0]]==board[cb[i][2]]):\n",
        "        return board[cb[i][0]]\n",
        "\n",
        "    return 0\n",
        "\n",
        "# Corrected and improved code\n",
        "def main():\n",
        "    choice = int(input(\"Enter 1 for playing against AI, 2 for playing against a friend:\"))\n",
        "    board = [0, 0, 0, 0, 0, 0, 0, 0, 0]\n",
        "    if choice == 1:\n",
        "        print(\"AI: O Vs You: X\")\n",
        "        player = int(input(\"Enter to play 1(st) or 2(nd): \"))\n",
        "        for i in range(0, 9):\n",
        "            if analyzeboard(board) != 0:\n",
        "                break\n",
        "            if (i + player) % 2 == 0:\n",
        "                CompTurn(board)\n",
        "            else:\n",
        "                ConstBoard(board)\n",
        "                User1Turn(board)\n",
        "    else:\n",
        "        for i in range(0, 9):\n",
        "            if analyzeboard(board) != 0:\n",
        "                break\n",
        "            if i % 2 == 0:\n",
        "                ConstBoard(board)\n",
        "                User1Turn(board)\n",
        "            else:\n",
        "                ConstBoard(board)\n",
        "                User2Turn(board)\n",
        "\n",
        "    x = analyzeboard(board)\n",
        "    if x == 0:\n",
        "        ConstBoard(board)\n",
        "        print(\"Draw!\")\n",
        "\n",
        "    if x == -1:\n",
        "        ConstBoard(board)\n",
        "        print(\"Player X Wins!!!!\")\n",
        "\n",
        "    if x == 1:\n",
        "        ConstBoard(board)\n",
        "        print(\"Player O wins!!!!\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    }
  ]
}